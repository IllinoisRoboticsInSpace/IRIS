<?xml version="1.0"?>
<robot name="differential_robot" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.5"/><!-- Along x axis -->
    <xacro:property name="base_length" value="1.0"/><!-- Along y axis -->
    <xacro:property name="base_height" value="0.5"/><!-- Along z axis -->

    <!-- Wheel set 1 -->
    <xacro:property name="wheel_radius" value="0.089"/>
    <xacro:property name="wheel_width" value="0.1016"/>
    <xacro:property name="wheel_to_chassis_gap" value="0.025"/><!-- Along x axis -->
    <xacro:property name="wheel_zoff" value="0.2"/> <!-- downwards is positive -->
    <xacro:property name="wheel_xoff" value="0.3"/>
    <xacro:property name="wheel_ygap" value="0.0508"/>

    <!-- Wheel set 2 -->
    <xacro:property name="wheel_radius2" value="0.089"/>
    <xacro:property name="wheel_width2" value="0.1016"/>
    <xacro:property name="wheel_to_chassis_gap2" value="0.025"/><!-- Along x axis -->
    <xacro:property name="wheel_zoff2" value="0.2"/>
    <xacro:property name="wheel_xoff2" value="-0.3"/>
    <xacro:property name="wheel_ygap2" value="0.0508"/>

    <xacro:property name="caster_xoff" value="0.14"/>

    <xacro:property name="wheel_seperation" value="0.14"/>

    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
        <mass value="${m}"/>
        <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>


    <!-- Robot Base -->
    <link name="base_link">

        <collision>
          <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/>
          </geometry>
        </collision>

        <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
    
        <visual>
        <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/>
        </geometry>
        <material name="UIUCBlue">
            <color rgba=".19 .41 .75 1.0"/>
        </material>
        </visual>
    </link>

    <!-- Robot Footprint -->
    <link name="base_footprint"/>

    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
    </joint>

    <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">

        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="Gray">
            <color rgba="0.5 0.5 0.5 1.0"/>
            </material>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>

        <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>

        </link>

        <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

    <!-- Wheels Set 2-->
    <xacro:macro name="wheel2" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">

        <xacro:cylinder_inertia m="0.5" r="${wheel_radius2}" h="${wheel_width2}"/>

        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius2}" length="${wheel_width2}"/>
            </geometry>
            <material name="Gray">
            <color rgba="0.5 0.5 0.5 1.0"/>
            </material>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
            <cylinder radius="${wheel_radius2}" length="${wheel_width2}"/>
            </geometry>
        </collision>

        </link>

        <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_xoff2} ${y_reflect*(base_width/2+wheel_ygap2)} ${-wheel_zoff2}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel2 prefix="drivewhl_l2" x_reflect="-1" y_reflect="1" />
    <xacro:wheel2 prefix="drivewhl_r2" x_reflect="-1" y_reflect="-1" />

<!-- GAZEBO WIP -->

<link name="imu_link">
  <visual>
    <geometry>
      <box size="0.1 0.1 0.1"/>
    </geometry>
  </visual>

  <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
</link>

<collision>
  <geometry>
    <box size="0.1 0.1 0.1"/>
  </geometry>
</collision>

<joint name="imu_joint" type="fixed">
  <parent link="base_link"/>
  <child link="imu_link"/>
  <origin xyz="0 0 0.01"/>
</joint>

 <gazebo reference="imu_link">
  <sensor name="imu_sensor" type="imu">
   <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
      <ros>
        <namespace>/demo</namespace>
        <remapping>~/out:=imu</remapping>
      </ros>
      <initial_orientation_as_reference>false</initial_orientation_as_reference>
    </plugin>
    <always_on>true</always_on>
    <update_rate>100</update_rate>
    <visualize>true</visualize>
    <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>

<gazebo>
  <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
    <ros>
      <namespace>/demo</namespace>
    </ros>

    <!-- wheels -->
    <left_joint>drivewhl_l_joint</left_joint>
    <right_joint>drivewhl_r_joint</right_joint>

    <!-- kinematics -->
    <wheel_separation>0.4</wheel_separation>
    <wheel_diameter>0.2</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>20</max_wheel_torque>
    <max_wheel_acceleration>1.0</max_wheel_acceleration>

    <!-- output -->
    <publish_odom>true</publish_odom>
    <publish_odom_tf>false</publish_odom_tf>
    <publish_wheel_tf>true</publish_wheel_tf>

    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_link</robot_base_frame>
  </plugin>
</gazebo>

</robot>